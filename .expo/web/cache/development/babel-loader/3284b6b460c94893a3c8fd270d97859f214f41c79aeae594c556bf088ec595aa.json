{"ast":null,"code":"import React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport HomeScreen from \"../screens/HomeScreen\";\nimport AddScreen from \"../screens/AddScreen\";\nimport SettingsScreen from \"../screens/SettingsScreen\";\nimport DetailsScreen from \"../screens/DetailsScreen\";\nimport EditScreen from \"../screens/EditScreen\";\nimport LoginScreen from \"../screens/auth/LoginScreen\";\nimport RegisterScreen from \"../screens/auth/RegisterScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nvar Tab = createBottomTabNavigator();\nvar MainTabs = function MainTabs() {\n  return _jsxs(Tab.Navigator, {\n    initialRouteName: \"Home\",\n    screenOptions: function screenOptions(_ref) {\n      var route = _ref.route;\n      return {\n        headerShown: false,\n        tabBarActiveTintColor: \"blue\",\n        tabBarInactiveTintColor: \"gray\",\n        tabBarVisible: route.name === \"Login\" || route.name === \"Register\" ? false : true,\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var focused = _ref2.focused,\n            color = _ref2.color,\n            size = _ref2.size;\n          var iconName;\n          if (route.name === \"Home\") {\n            iconName = focused ? \"ios-home\" : \"ios-home-outline\";\n          } else if (route.name === \"Add Task\") {\n            iconName = focused ? \"ios-add-circle\" : \"ios-add-circle-outline\";\n          } else if (route.name === \"TaskDetails\") {\n            iconName = focused ? \"ios-list\" : \"ios-list-outline\";\n          } else if (route.name === \"Settings\") {\n            iconName = focused ? \"ios-settings\" : \"ios-settings-outline\";\n          }\n          return _jsx(Ionicons, {\n            name: iconName,\n            size: size,\n            color: color\n          });\n        }\n      };\n    },\n    children: [_jsx(Tab.Screen, {\n      name: \"Home\",\n      component: HomeScreen,\n      options: {\n        headerShown: false\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"Add Task\",\n      component: AddScreen,\n      options: {\n        headerShown: false\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"Settings\",\n      component: SettingsScreen,\n      options: {\n        headerShown: false\n      }\n    })]\n  });\n};\nvar AppNavigator = function AppNavigator(isAuthenticated) {\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      initialRouteName: isAuthenticated ? \"MainTabs\" : \"Login\",\n      children: [_jsx(Stack.Screen, {\n        name: \"MainTabs\",\n        component: MainTabs,\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"DetailsScreen\",\n        component: DetailsScreen\n      }), _jsx(Stack.Screen, {\n        name: \"EditScreen\",\n        component: EditScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Login\",\n        component: LoginScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Register\",\n        component: RegisterScreen\n      })]\n    })\n  });\n};\nexport default AppNavigator;","map":{"version":3,"names":["React","NavigationContainer","createStackNavigator","createBottomTabNavigator","Ionicons","HomeScreen","AddScreen","SettingsScreen","DetailsScreen","EditScreen","LoginScreen","RegisterScreen","jsx","_jsx","jsxs","_jsxs","Stack","Tab","MainTabs","Navigator","initialRouteName","screenOptions","_ref","route","headerShown","tabBarActiveTintColor","tabBarInactiveTintColor","tabBarVisible","name","tabBarIcon","_ref2","focused","color","size","iconName","children","Screen","component","options","AppNavigator","isAuthenticated"],"sources":["C:/Users/sofia/react_async/src/navigator/AppNavigator.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\r\nimport { Ionicons } from \"react-native-vector-icons\";\r\nimport HomeScreen from \"../screens/HomeScreen\";\r\nimport AddScreen from \"../screens/AddScreen\";\r\nimport SettingsScreen from \"../screens/SettingsScreen\";\r\nimport DetailsScreen from \"../screens/DetailsScreen\";\r\nimport EditScreen from \"../screens/EditScreen\";\r\nimport LoginScreen from \"../screens/auth/LoginScreen\";\r\nimport RegisterScreen from \"../screens/auth/RegisterScreen\";\r\n\r\nconst Stack = createStackNavigator();\r\nconst Tab = createBottomTabNavigator();\r\n\r\nconst MainTabs = () => (\r\n  <Tab.Navigator\r\n    initialRouteName=\"Home\"\r\n    screenOptions={({ route }) => ({\r\n      headerShown: false,\r\n      tabBarActiveTintColor: \"blue\",\r\n      tabBarInactiveTintColor: \"gray\",\r\n      tabBarVisible:\r\n        route.name === \"Login\" || route.name === \"Register\" ? false : true,\r\n      tabBarIcon: ({ focused, color, size }) => {\r\n        let iconName;\r\n\r\n        if (route.name === \"Home\") {\r\n          iconName = focused ? \"ios-home\" : \"ios-home-outline\";\r\n        } else if (route.name === \"Add Task\") {\r\n          iconName = focused ? \"ios-add-circle\" : \"ios-add-circle-outline\";\r\n        } else if (route.name === \"TaskDetails\") {\r\n          iconName = focused ? \"ios-list\" : \"ios-list-outline\";\r\n        } else if (route.name === \"Settings\") {\r\n          iconName = focused ? \"ios-settings\" : \"ios-settings-outline\";\r\n        }\r\n\r\n        return <Ionicons name={iconName} size={size} color={color} />;\r\n      },\r\n    })}\r\n  >\r\n    <Tab.Screen\r\n      name=\"Home\"\r\n      component={HomeScreen}\r\n      options={{ headerShown: false }}\r\n    />\r\n    <Tab.Screen\r\n      name=\"Add Task\"\r\n      component={AddScreen}\r\n      options={{ headerShown: false }}\r\n    />\r\n    <Tab.Screen\r\n      name=\"Settings\"\r\n      component={SettingsScreen}\r\n      options={{ headerShown: false }}\r\n    />\r\n  </Tab.Navigator>\r\n);\r\n\r\nconst AppNavigator = (isAuthenticated) => {\r\n  return (\r\n    <NavigationContainer>\r\n      <Stack.Navigator initialRouteName={isAuthenticated ? \"MainTabs\" : \"Login\"}>\r\n        <Stack.Screen\r\n          name=\"MainTabs\"\r\n          component={MainTabs}\r\n          options={{ headerShown: false }}\r\n        />\r\n        <Stack.Screen name=\"DetailsScreen\" component={DetailsScreen} />\r\n        <Stack.Screen name=\"EditScreen\" component={EditScreen} />\r\n        <Stack.Screen name=\"Login\" component={LoginScreen} />\r\n        <Stack.Screen name=\"Register\" component={RegisterScreen} />\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n};\r\n\r\nexport default AppNavigator;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}