{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TextInput, Button, Text } from \"@react-native-material/core\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var handleLogin = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var storedEmail = yield AsyncStorage.getItem(\"email\");\n        var storedPassword = yield AsyncStorage.getItem(\"password\");\n        if (email === storedEmail && password === storedPassword) {\n          alert(\"Login bem-sucedido!\");\n          navigation.navigate(\"MainTabs\");\n        } else {\n          alert(\"Credenciais inválidas. Tente novamente.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao fazer login: \", error);\n      }\n    });\n    return function handleLogin() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var navigateToRegister = function navigateToRegister() {\n    navigation.navigate(\"Register\");\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Email\",\n      onChangeText: function onChangeText(text) {\n        return setEmail(text);\n      },\n      value: email\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Senha\",\n      onChangeText: function onChangeText(text) {\n        return setPassword(text);\n      },\n      value: password,\n      secureTextEntry: true\n    }), _jsx(Button, {\n      title: \"Login\",\n      onPress: handleLogin\n    }), _jsx(Text, {\n      style: styles.link,\n      onPress: navigateToRegister,\n      children: \"N\\xE3o tem uma conta? Cadastre-se aqui\"\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  input: {\n    width: \"100%\",\n    marginBottom: 10\n  },\n  link: {\n    marginTop: 10,\n    color: \"blue\"\n  }\n});\nexport default LoginScreen;","map":{"version":3,"names":["React","useState","View","StyleSheet","TextInput","Button","Text","AsyncStorage","jsx","_jsx","jsxs","_jsxs","LoginScreen","_ref","navigation","_useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","handleLogin","_ref2","_asyncToGenerator","storedEmail","getItem","storedPassword","alert","navigate","error","console","apply","arguments","navigateToRegister","style","styles","container","children","input","placeholder","onChangeText","text","value","secureTextEntry","title","onPress","link","create","flex","padding","alignItems","justifyContent","width","marginBottom","marginTop","color"],"sources":["C:/Users/sofia/react_async/src/screens/auth/LoginScreen.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, StyleSheet } from \"react-native\";\r\nimport { TextInput, Button, Text } from \"@react-native-material/core\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nconst LoginScreen = ({ navigation }) => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      const storedEmail = await AsyncStorage.getItem(\"email\");\r\n      const storedPassword = await AsyncStorage.getItem(\"password\");\r\n\r\n      if (email === storedEmail && password === storedPassword) {\r\n        alert(\"Login bem-sucedido!\");\r\n        // Reset da navegação para a HomeScreen após login bem-sucedido\r\n        // navigation.reset({\r\n        //   index: 0,\r\n        //   routes: [{ name: 'Login' }],\r\n        // });\r\n        navigation.navigate(\"MainTabs\");\r\n      } else {\r\n        alert(\"Credenciais inválidas. Tente novamente.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Erro ao fazer login: \", error);\r\n    }\r\n  };\r\n\r\n  const navigateToRegister = () => {\r\n    navigation.navigate(\"Register\");\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Email\"\r\n        onChangeText={(text) => setEmail(text)}\r\n        value={email}\r\n      />\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Senha\"\r\n        onChangeText={(text) => setPassword(text)}\r\n        value={password}\r\n        secureTextEntry\r\n      />\r\n      <Button title=\"Login\" onPress={handleLogin} />\r\n      <Text style={styles.link} onPress={navigateToRegister}>\r\n        Não tem uma conta? Cadastre-se aqui\r\n      </Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  input: {\r\n    width: \"100%\",\r\n    marginBottom: 10,\r\n  },\r\n  link: {\r\n    marginTop: 10,\r\n    color: \"blue\",\r\n  },\r\n});\r\n\r\nexport default LoginScreen;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}